
pipeline {
    agent none
    stages {
        stage('Build') {
            parallel {
                stage('Python 2.7') {
                    agent {
                        label "jvm_ubuntu"
                    }
                    steps {
                        echo "On ubuntu"
                        sh 'python2.7 ./waf-light'
                    }
                }
                stage('Python 3.6') {
                    agent {
                        label "jvm_freebsd"
                    }
                    steps {
                        echo "On Freebsd"
                        sh 'python3.6 ./waf-light'
                    }
                }
            }
        }
        stage('Linting') {
            parallel {
                stage('Deprecation warnings') {
                    agent {
                        label "jvm_ubuntu"
                    }
                    steps {
                        sh '''
cd waflib
find . -iname "*.pyc" -exec rm -f {} \\; || true
! (((PYTHONWARNINGS=all python3.6 -m compileall . > /dev/null) 2>&1 ) 2>&1) | grep -i DeprecationWarning
'''
                    }
                }
                stage('Pyflakes') {
                    agent {
                        label "jvm_freebsd"
                    }
                    steps {
                        sh '''
cd waflib
var=`(/usr/local/bin/pyflakes3.py *.py Tools/*.py extras/*.py 2>&1) | egrep "undefined name|invalid syntax|inconsistent use|unindent does not match any outer indentation level" | wc -l`
if [ "0" -eq "$var" ]
then
   /usr/local/bin/pyflakes3.py *.py Tools/*.py extras/*.py || true
else
   # just do it again and fail
   /usr/local/bin/pyflakes3.py *.py Tools/*.py extras/*.py
   exit 1
fi
'''
                    }
                }
                stage('Unit tests') {
                    agent {
                        label "jvm_fedora"
                    }
                    steps {
                        sh '''
./waf-light
# cannot use pushd
export PATH=$PATH:$PWD
echo "the path is" $PATH
cd tests/preproc/
../../waf distclean
../../waf configure build
cd ../..
cd tests/install/
../../waf distclean
../../waf configure build
cd ../..
cd tests/general/
../../waf distclean
../../waf configure build
cd ../..
cd tests/init/
../../waf distclean
../../waf configure build
cd ../..
export WAF_TEST_GROUP=waftest
cd tests/install_group/
../../waf distclean
../../waf configure build
'''
                    }
                }
            }
        }
        stage('Integration builds') {
            parallel {
                stage('Ubuntu build with Python 2.5') {
                    agent {
                        label "jvm_ubuntu"
                    }
                    steps {
                        sh '''
./waf-light
cp waf demos/c
cd demos/c
LD_LIBRARY_PATH=/opt/lib /opt/bin/python2.5 ./waf distclean configure clean build
'''
                    }
                }
                stage('Ubuntu build with Python 2.7') {
                    agent {
                        label "jvm_ubuntu"
                    }
                    steps {
                        sh '''
./waf-light
cp waf demos/c
cd demos/c
python2.7 ./waf distclean configure clean build
'''
                    }
                }
                stage('Freebsd C build with Python 3') {
                    agent {
                        label "jvm_freebsd"
                    }
                    steps {
                        sh '''
./waf-light
/bin/cp waf demos/c/
cd demos/c
python3.6 ./waf distclean configure clean build
'''
                    }
                }
            }
        }
    }
}
